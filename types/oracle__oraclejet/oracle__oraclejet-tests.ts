// Since all the definitions are auto generated from jsdoc doclets and internally tested through application,
// add some basic tests here.
import { ojAccordion } from "ojs/ojaccordion";
import AnimationUtils = require("ojs/ojanimation");
import ArrayDataProvider = require("ojs/ojarraydataprovider");
import ArrayTreeDataProvider = require("ojs/ojarraytreedataprovider");
import { AttributeGroupHandler, ColorAttributeGroupHandler, ShapeAttributeGroupHandler } from 'ojs/ojattributegrouphandler';
import { ojAvatar } from "ojs/ojavatar";
import { ojButton, ojButtonsetMany, ojButtonsetOne } from "ojs/ojbutton";
import { ojChart, ojChartGroup, ojChartItem, ojChartSeries, ojSparkChart, ojSparkChartItem } from "ojs/ojchart";
import { ojCheckboxset } from "ojs/ojcheckboxset";
import { ojCollapsible } from "ojs/ojcollapsible";
import CollectionDataprovider = require("ojs/ojcollectiondataprovider");
import Color = require("ojs/ojcolor");
import { ojColorPalette } from "ojs/ojcolorpalette";
import { ojColorSpectrum } from "ojs/ojcolorspectrum";
import Components = require("ojs/ojcomponentcore");
import Composite = require("ojs/ojcomposite");
import Config = require('ojs/ojconfig');
import Context = require("ojs/ojcontext");
import { ojConveyorBelt } from "ojs/ojconveyorbelt";
import { ojDataGrid } from "ojs/ojdatagrid";
import { DataMapping, DataProvider, DataProviderAddOperationEventDetail, DataProviderMutationEventDetail, DataProviderOperationEventDetail } from "ojs/ojdataprovider";
import { ojDatePicker, ojDateTimePicker, ojInputDate, ojInputDateTime, ojInputTime } from "ojs/ojdatetimepicker";
import { ojDefer } from "ojs/ojdefer";
import DeferredDataprovider = require("ojs/ojdeferreddataprovider");
import { ojDiagram, ojDiagramLink, ojDiagramNode } from "ojs/ojdiagram";
import { ojDialog } from "ojs/ojdialog";
import { dvtBaseComponent } from "ojs/ojdvt-base";
import { editableValue } from "ojs/ojeditablevalue";
import ExpressionUtils = require('ojs/ojexpressionutils');
import { ojFilePicker, FileUploadTransport } from "ojs/ojfilepicker";
import { ojFilmStrip } from "ojs/ojfilmstrip";
import { ojFormLayout } from "ojs/ojformlayout";
import { ojGantt, ojGanttRow, ojGanttTask, ojGanttDependency } from "ojs/ojgantt";
import GanttUtils = require ('ojs/ojganttutils');
import { ojLedGauge, ojRatingGauge, ojStatusMeterGauge } from "ojs/ojgauge";
import { ojInputNumber } from "ojs/ojinputnumber";
import { ojInputPassword, ojInputText, ojTextArea } from "ojs/ojinputtext";
import { KeySet, ExpandAllKeySet, ExpandedKeySet } from "ojs/ojkeyset";
import { ObservableExpandedKeySet } from "ojs/ojknockout-keyset";
import KnockoutUtils = require("ojs/ojknockout-model");
import KnockoutTemplateUtils = require('ojs/ojknockouttemplateutils');
import { ojLabel } from "ojs/ojlabel";
import { ojLabelValue } from "ojs/ojlabelvalue";
import { ojLegend } from "ojs/ojlegend";
import ListDataProviderView = require("ojs/ojlistdataproviderview");
import { ojListView } from "ojs/ojlistview";
import LocaleData = require('ojs/ojlocaledata');
import Logger = require('ojs/ojlogger');
import { ojMasonryLayout } from "ojs/ojmasonrylayout";
import { ojMenu } from "ojs/ojmenu";
import { ojMenuSelectMany } from "ojs/ojmenuselectmany";
import { ojMessages } from "ojs/ojmessages";
import { ojMessage } from "ojs/ojmessage";
import Message = require("ojs/ojmessaging");
import { Collection, Model, URLError, OAuth } from "ojs/ojmodel";
import { ojModule } from "ojs/ojmodule-element";
import ModuleElementUtils = require("ojs/ojmodule-element-utils");
import ModuleAnimations = require("ojs/ojmoduleanimations") ;
import { ojNavigationList, ojTabBar } from "ojs/ojnavigationlist";
import { ojNBox } from "ojs/ojnbox";
import { ojOptgroup } from "ojs/ojoptgroup";
import { ojOption } from "ojs/ojoption";
import { ojPictoChart, ojPictoChartItem } from "ojs/ojpictochart";
import { ojPopup } from "ojs/ojpopup";
import { ojProgress } from "ojs/ojprogress";
import { ojProgressList, ProgressItem } from "ojs/ojprogresslist";
import PullToRefreshUtils = require("ojs/ojpulltorefresh");
import { ojRadioset } from "ojs/ojradioset";
import { ojRefresher } from "ojs/ojrefresher";
import ResponsiveKnockoutUtils = require('ojs/ojresponsiveknockoututils');
import ResponsiveUtils = require('ojs/ojresponsiveutils');
import Router = require("ojs/ojrouter");
import { ojComboboxOne, ojComboboxMany, ojSelectOne, ojSelectMany } from "ojs/ojselectcombobox";
import { ojSlider } from "ojs/ojslider";
import { ojSunburst } from "ojs/ojsunburst";
import { ojSwipeActions } from "ojs/ojswipeactions";
import SwipeToRevealUtils = require("ojs/ojswipetoreveal");
import { ojSwitch } from "ojs/ojswitch";
import { ojSwitcher } from "ojs/ojswitcher";
import { ojTable } from "ojs/ojtable";
import { ojTagCloud } from "ojs/ojtagcloud";
import { ojThematicMap } from "ojs/ojthematicmap";
import ThemeUtils = require('ojs/ojthemeutils');
import { dvtTimeComponent } from "ojs/ojtime-base";
import { ojTimeAxis } from "ojs/ojtimeaxis";
import TimeUtils = require("ojs/ojtimeutils");
import { ojToolbar } from "ojs/ojtoolbar";
import { ojTrain } from "ojs/ojtrain";
import Translations = require("ojs/ojtranslation");
import TreeDataProvider = require("ojs/ojtreedataprovider");
import { ojTreemap } from "ojs/ojtreemap";
import { Validation, Validator, ValidatorError, ValidatorFactory,
    AsyncValidator, LengthValidator, LengthValidatorFactory, RegExpValidator, RegExpValidatorFactory, RequiredValidator, RequiredValidatorFactory } from "ojs/ojvalidation-base";
import { DateRestrictionValidator, DateRestrictionValidatorFactory, DateTimeRangeValidator, DateTimeRangeValidatorFactory } from "ojs/ojvalidation-datetime";
import { NumberRangeValidator, NumberRangeValidatorFactory } from "ojs/ojvalidation-number";
import { ojValidationGroup } from "ojs/ojvalidationgroup";

const onChangedCallback = (event: CustomEvent) => {
};
const myHTMLElement = document.getElementById('myelement');
const accordionElement =  myHTMLElement as ojAccordion;
accordionElement.multiple = true;
accordionElement.onMultipleChanged = onChangedCallback;

const avatarElement = myHTMLElement as ojAvatar;
avatarElement.size = "xxs";
avatarElement.set("initials", "I");
avatarElement.unset("src");

const button = myHTMLElement as ojButtonsetOne;
button.chroming = 'half';
